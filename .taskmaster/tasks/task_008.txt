# Task ID: 8
# Title: Implement Email System with Magic Link Strategy
# Status: pending
# Dependencies: 3
# Priority: medium
# Description: Build robust email delivery system with magic link authentication and configurable SMTP options
# Details:
Implement email system:
- Single pre-selected email retrieval strategy for reliability (no configuration required)
- Magic link generation for invitations with 7-day expiry
- Magic link impersonation flow: generate without sending, immediate OTP verification
- Integration with Supabase SMTP or custom transporter option
- Email templates for invitations, role changes, team updates
- Graceful degradation with cascading fallbacks for auth errors
- User-friendly error messages and partial success handling
- Secure token hashing for invite links
- Complete invitation backend using Supabase's auth.admin.inviteUserByEmail()
- Admin UI for managing pending invitations in TeamForm.vue
- Display table for pending invitations with status
- Revoke and resend invitation functionality

# Test Strategy:
Email delivery tests with test SMTP server, magic link validation tests, token security tests, template rendering tests, fallback mechanism tests. Test complete invitation flow from sending invite to team membership completion. Verify UI functionality for managing pending invitations, including display, revoke, and resend features.

# Subtasks:
## 1. Implement SMTP Configuration and Email Transport Layer [done]
### Dependencies: None
### Description: Create a configurable email transport layer that supports both Supabase SMTP and custom SMTP options with fallback mechanisms
### Details:
Create an EmailTransporter class that handles SMTP configuration. Implement a strategy pattern to support different email providers with Supabase as default. Add configuration validation, connection testing, and cascading fallbacks between providers when delivery fails. Include error logging and monitoring capabilities.

## 2. Develop Magic Link Token Generation and Validation [done]
### Dependencies: None
### Description: Create secure token generation for magic links with proper hashing, expiration handling, and validation logic
### Details:
Implement a TokenService that generates cryptographically secure tokens with configurable expiration (default 7 days). Store hashed tokens in the database with creation timestamp and expiry date. Create validation methods to verify token authenticity and check expiration status. Implement token revocation functionality for security.

## 3. Create Email Template System with Standard Templates [done]
### Dependencies: None
### Description: Build a template engine for emails with standard templates for invitations, role changes, and team updates
### Details:
Implement a TemplateEngine class that supports HTML and text email formats. Create base templates for all required email types (invitations, role changes, team updates). Include personalization variables, styling consistent with application branding, and responsive design. Ensure templates are accessible and render properly across email clients.

## 4. Implement Magic Link Invitation Flow [done]
### Dependencies: 8.1, 8.2, 8.3
### Description: Build the end-to-end invitation flow using magic links, including generation, delivery, and user acceptance
### Details:
Create an InvitationService that generates magic links using the TokenService. Implement email sending via the EmailTransporter with appropriate templates. Add endpoints for accepting invitations and verifying tokens. Include special handling for impersonation flow with OTP verification. Implement proper error handling and user feedback for failed invitations.

## 5. Implement Error Handling and Monitoring System [done]
### Dependencies: 8.1, 8.2, 8.3, 8.4
### Description: Create comprehensive error handling for the email system with user-friendly messages and monitoring
### Details:
Implement a centralized error handling system for all email operations. Create user-friendly error messages for common failure scenarios. Add detailed logging for debugging purposes. Implement metrics collection for monitoring email delivery success rates, timing, and error frequencies. Create an admin dashboard component to display system health and recent email activity.

## 6. Create /accept-invite Page and Route [pending]
### Dependencies: 8.4
### Description: Develop the frontend page and route for accepting invitations using the existing TeamAuthConfirmation component
### Details:
Implement the /accept-invite page using the TeamAuthConfirmation component. Ensure the page is styled consistently with the rest of the application and handles all necessary user interactions for accepting an invitation.

## 7. Wire up acceptInvite() Method [pending]
### Dependencies: 8.6
### Description: Integrate the acceptInvite() method from useTeamAuth into the /accept-invite page
### Details:
Ensure that the acceptInvite() method is correctly called when a user accepts an invitation on the /accept-invite page. Handle any errors and provide user feedback as necessary.

## 8. Test Complete Invitation Flow [pending]
### Dependencies: 8.7
### Description: Conduct comprehensive testing of the invitation flow from sending an invite to team membership completion
### Details:
Perform end-to-end testing of the entire invitation process, including sending invitations, accepting them via the /accept-invite page, and verifying team membership completion.

## 9. Add Pending Invitation Management to Admin UI [pending]
### Dependencies: 8.4
### Description: Enhance the TeamForm.vue component to manage pending invitations
### Details:
Implement a display table in TeamForm.vue to show pending invitations with their current status. Add functionality to revoke or resend invitations directly from the UI. Ensure the UI is intuitive and provides real-time updates on invitation status.

