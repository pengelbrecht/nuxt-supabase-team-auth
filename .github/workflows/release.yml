name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "Releasing version: ${VERSION}"

      - name: Lint
        run: pnpm run lint

      - name: Type check
        run: pnpm run test:types

      - name: Build
        run: pnpm run build

      - name: Test
        run: pnpm run test

      - name: Validate package
        run: pnpm run validate:package

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      tarball: ${{ steps.pack.outputs.tarball }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm run build

      - name: Pack package
        id: pack
        run: |
          TARBALL=$(npm pack --silent)
          echo "tarball=${TARBALL}" >> $GITHUB_OUTPUT
          echo "Created package: ${TARBALL}"

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: package-tarball
          path: ${{ steps.pack.outputs.tarball }}
          retention-days: 7

  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog and capture output
          CHANGELOG=$(pnpm run changelog --silent | tail -n +3)
          echo "Generated changelog"
          
          # Save to file for artifact
          echo "$CHANGELOG" > CHANGELOG.md
          
          # Set output (escape newlines for GitHub Actions)
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Upload changelog artifact
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: CHANGELOG.md
          retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, changelog]
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: package-tarball

      - name: Download changelog artifact
        uses: actions/download-artifact@v3
        with:
          name: changelog

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Release ${{ needs.validate.outputs.tag }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            ${{ needs.build.outputs.tarball }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, build, release]
    if: github.repository == 'pengelbrecht/nuxt-supabase-team-auth' && startsWith(github.ref, 'refs/tags/v')
    environment: npm-publish
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm run build

      - name: Publish to NPM
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify:
    name: Post-Release Notification
    runs-on: ubuntu-latest
    needs: [validate, release, publish]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**GitHub Release:** ${{ needs.release.result == 'success' && '✅ Created' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**NPM Publish:** ${{ needs.publish.result == 'success' && '✅ Published' || needs.publish.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM:** https://www.npmjs.com/package/nuxt-supabase-team-auth" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub:** https://github.com/pengelbrecht/nuxt-supabase-team-auth/releases/tag/${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY